# -*- coding: utf-8 -*-
"""Personal Manager CLI (Intermediate Level).py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BhGp0HaXIALX4dp7iKw66DCv-aMAR6fd
"""

import json
import os
import re
from datetime import date

DATA_DIR = "data"
TASK_FILE = os.path.join(DATA_DIR, "tasks.json")
EXPENSE_FILE = os.path.join(DATA_DIR, "expenses.json")
NOTE_FILE = os.path.join(DATA_DIR, "notes.txt")

# ---------- Utility Functions ----------
def ensure_data_dir():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)

def load_json(file, default):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default
    except json.JSONDecodeError:
        return default

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

# ---------- Task Manager ----------
def add_task(tasks):
    title = input("Enter task title: ")
    due = input("Enter due date (YYYY-MM-DD or leave blank): ")
    task = {"title": title, "due": due or None, "done": False}
    tasks.append(task)
    save_json(TASK_FILE, tasks)
    print("Task added.")

def list_tasks(tasks):
    if not tasks:
        print("No tasks found.")
        return
    for i, t in enumerate(tasks, 1):
        status = "✔" if t["done"] else "✗"
        print(f"{i}. {t['title']} (Due: {t['due']}) [{status}]")

def mark_done(tasks):
    list_tasks(tasks)
    try:
        num = int(input("Enter task number to mark done: "))
        tasks[num - 1]["done"] = True
        save_json(TASK_FILE, tasks)
        print(" Task marked as done.")
    except (ValueError, IndexError):
        print("Invalid selection.")

# ---------- Expense Tracker ----------
def add_expense(expenses):
    try:
        amount = float(input("Enter amount: "))
        category = input("Enter category: ")
        note = input("Enter note (optional): ")
        entry = {"amount": amount, "category": category, "note": note, "date": str(date.today())}
        expenses.append(entry)
        save_json(EXPENSE_FILE, expenses)
        print(" Expense recorded.")
    except ValueError:
        print("Invalid amount.")

def list_expenses(expenses):
    if not expenses:
        print("No expenses yet.")
        return
    total = 0
    for e in expenses:
        print(f"{e['date']} - {e['category']}: ${e['amount']} ({e['note']})")
        total += e["amount"]
    print(f"Total: ${total:.2f}")

# ---------- Notes Manager ----------
def add_note():
    text = input("Enter your note: ")
    with open(NOTE_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")
    print(" Note added.")

def list_notes():
    try:
        with open(NOTE_FILE, "r", encoding="utf-8") as f:
            notes = f.readlines()
        for i, n in enumerate(notes, 1):
            print(f"{i}. {n.strip()}")
    except FileNotFoundError:
        print("No notes found.")

def search_notes():
    pattern = input("Enter search keyword or regex: ")
    try:
        regex = re.compile(pattern, re.IGNORECASE)
        with open(NOTE_FILE, "r", encoding="utf-8") as f:
            for line in f:
                if regex.search(line):
                    print("+", line.strip())
    except re.error:
        print("Invalid regex pattern.")

# ---------- Analytics ----------
def show_summary(tasks, expenses):
    print("\n Summary Report:")
    print(f"Total tasks: {len(tasks)}")
    print(f"Completed tasks: {sum(1 for t in tasks if t['done'])}")
    print(f"Pending tasks: {sum(1 for t in tasks if not t['done'])}")
    total_exp = sum(e['amount'] for e in expenses)
    print(f"Total expenses: ${total_exp:.2f}")

# ---------- Main CLI ----------
def main():
    ensure_data_dir()
    tasks = load_json(TASK_FILE, [])
    expenses = load_json(EXPENSE_FILE, [])

    while True:
        print("\n===== PERSONAL MANAGER =====")
        print("1. Add Task")
        print("2. View Tasks")
        print("3. Mark Task Done")
        print("4. Add Expense")
        print("5. View Expenses")
        print("6. Add Note")
        print("7. View Notes")
        print("8. Search Notes")
        print("9. Summary")
        print("0. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            add_task(tasks)
        elif choice == "2":
            list_tasks(tasks)
        elif choice == "3":
            mark_done(tasks)
        elif choice == "4":
            add_expense(expenses)
        elif choice == "5":
            list_expenses(expenses)
        elif choice == "6":
            add_note()
        elif choice == "7":
            list_notes()
        elif choice == "8":
            search_notes()
        elif choice == "9":
            show_summary(tasks, expenses)
        elif choice == "0":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()

